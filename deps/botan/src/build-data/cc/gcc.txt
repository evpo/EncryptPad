macro_name GCC

binary_name g++

minimum_supported_version 11.0

lang_flags "-std=c++20 -D_REENTRANT"

# This should only contain flags which are included in GCC 11
warning_flags "-Wall -Wextra -Wpedantic -Wstrict-aliasing -Wcast-align -Wmissing-declarations -Wpointer-arith -Wcast-qual -Wzero-as-null-pointer-constant -Wnon-virtual-dtor -Wold-style-cast -Wsuggest-override -Wshadow -Wextra-semi"

# Boost headers have 0 as nullptr and non-virtual-dtor issues so we can't werror on them
# Have to disable maybe-uninitialized due to GCC bugs like https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105937
werror_flags "-Werror -Wno-error=strict-overflow -Wno-error=zero-as-null-pointer-constant -Wno-error=non-virtual-dtor -Wno-error=maybe-uninitialized -Wno-error=stringop-overread"

maintainer_warning_flags "-Wstrict-overflow=5"

supports_gcc_inline_asm yes

optimization_flags "-O3"
sanitizer_optimization_flags "-O1 -fno-optimize-sibling-calls -fno-omit-frame-pointer"
size_optimization_flags "-Os"

shared_flags "-fPIC"
coverage_flags "--coverage"
stack_protector_flags "-fstack-protector"

add_system_include_dir_option "-isystem"
add_sysroot_option "--sysroot="

<sanitizers>
default   -> iterator,address

iterator  -> "-D_GLIBCXX_DEBUG"
address   -> "-fsanitize=address"
undefined -> "-fsanitize=undefined -fno-sanitize-recover=undefined"
</sanitizers>

visibility_build_flags "-fvisibility=hidden"
visibility_attribute '__attribute__((visibility("default")))'

# Include dependency tracking for Ninja
# See: https://ninja-build.org/manual.html#ref_headers
ninja_header_deps_style 'gcc'
header_deps_flag '-MD'
header_deps_out '-MF'

<so_link_commands>
# The default works for GNU ld and several other Unix linkers
default       -> "{cxx} -shared -fPIC -Wl,-soname,{soname_abi}"

# macOS, HP-UX, and Solaris linkers use different syntax
macos   -> "{cxx} -dynamiclib -fPIC -install_name {libdir}/{soname_abi}"
hpux    -> "{cxx} -shared -fPIC -Wl,+h,{soname_abi}"
solaris -> "{cxx} -shared -fPIC -Wl,-h,{soname_abi}"

# AIX and OpenBSD don't use sonames at all
aix     -> "{cxx} -shared -fPIC"
openbsd -> "{cxx} -shared -fPIC"

mingw   -> "{cxx} -shared -Wl,--out-implib,{shared_lib_name}.a"
</so_link_commands>

<isa_flags>
sse2    -> "-msse2"
ssse3   -> "-mssse3"
sse41   -> "-msse4.1"
sse42   -> "-msse4.2"
avx2    -> "-mavx2"
avx512  -> "-mavx512f -mavx512bw -mavx512dq -mavx512vbmi -mavx512vbmi2 -mavx512bitalg -mavx512vl -mavx512ifma"

bmi2    -> "-mbmi -mbmi2"
aesni   -> "-maes -mpclmul"
rdrand  -> "-mrdrnd"
rdseed  -> "-mrdseed"
sha     -> "-msha"
altivec -> "-maltivec"

ppc64:vsx -> "-mvsx"
ppc64:powercrypto -> "-mcrypto"
ppc64:power9 -> "-mcpu=power9"

arm64:armv8crypto -> ""
arm64:armv8sm3 -> "-march=armv8.2-a+sm4"
arm64:armv8sm4 -> "-march=armv8.2-a+sm4"
arm64:armv8sha512 -> "-march=armv8.2-a+sha3"
arm64:armv8sha3 -> "-march=armv8.2-a+sha3"

# For Aarch32 -mfpu=neon is required
# For Aarch64 NEON is enabled by default
arm32:neon    -> "-mfpu=neon"
arm64:neon    -> ""
</isa_flags>

# Flags set here are included at compile and link time
<mach_abi_linking>
all!haiku,qnx,none -> "-pthread"

s390    -> "-m31"
s390x   -> "-m64"
sparc32 -> "-m32 -mno-app-regs"
sparc64 -> "-m64 -mno-app-regs"
ppc64   -> "-m64"
x86_32  -> "-m32"
x86_64  -> "-m64"
x32     -> "-mx32"

qnx     -> "-fexceptions"
cygwin  -> "-U__STRICT_ANSI__"
</mach_abi_linking>
