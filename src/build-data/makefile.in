# Paths to relevant programs

CXX            = %{cxx}
LINKER         = %{linker}
AR             = %{ar_command}
PYTHON_EXE     = %{python_exe}
MKDIR_P        = mkdir -p

# Compiler Flags

ABI_FLAGS      = %{cc_sysroot} %{cxx_abi_flags}
LANG_FLAGS     = %{cc_lang_flags}
CXXFLAGS       = %{cc_compile_flags}
WARN_FLAGS     = %{cc_warning_flags}
SO_OBJ_FLAGS   = %{shared_flags}
LDFLAGS        = %{ldflags}

EXE_LINK_CMD   = %{exe_link_cmd}
POST_LINK_CMD  = %{post_link_cmd}

LIB_LINKS_TO   = %{link_to}
EXE_LINKS_TO   = %{library_target} $(LIB_LINKS_TO)

BUILD_FLAGS    = $(ABI_FLAGS) $(LANG_FLAGS) $(CXXFLAGS) $(WARN_FLAGS)
TEST_BUILD_FLAGS = $(ABI_FLAGS) $(LANG_FLAGS) $(CXXFLAGS)
DEPS_BUILD_FLAGS = $(ABI_FLAGS) $(LANG_FLAGS) $(CXXFLAGS)

PREFIX = %{prefix}
BINDIR = %{bindir}
SCRIPTS_DIR = scripts

INCLUDE_PATHS = %{include_paths}

%{if debug_mode}
RELEASE=
CONFIG_DIR=debug
%{endif}

%{unless debug_mode}
RELEASE=on
CONFIG_DIR=release
%{endif}

# The primary target
all: %{default_targets}

# Executable targets
CLI           = %{cli_exe}
TEST          = %{test_exe}
LIBRARIES     = %{library_target}

cli: $(CLI)
test: $(TEST)
libs: $(LIBRARIES)
zlib: $(ZLIB)
bzip2: $(BZIP2)

# Botan
%{if build_botan}
BOTAN_TARGET = %{botan_target}
BOTAN_BUILD_DIR = %{botan_build_dir}
$(BOTAN_TARGET):
	$(MAKE) -C $(BOTAN_BUILD_DIR) libs
%{endif}

BOTAN_CXXFLAGS = %{botan_cxxflags}
BOTAN_LDFLAGS = %{botan_ldflags}

botan: $(BOTAN_TARGET)

botan_clean:
%{if build_botan}
	$(MAKE) -C $(BOTAN_BUILD_DIR) clean
%{endif}

botan_distclean:
%{if build_botan}
	$(MAKE) -C $(BOTAN_BUILD_DIR) distclean
%{endif}

# EncryptMsg
ENCRYPTMSG_TARGET = %{encryptmsg_target}
ENCRYPTMSG_BUILD_DIR = %{encryptmsg_build_dir}
ENCRYPTMSG_LDFLAGS = %{encryptmsg_ldflags}
$(ENCRYPTMSG_TARGET):
	$(MAKE) -C $(ENCRYPTMSG_BUILD_DIR)

encryptmsg: $(ENCRYPTMSG_TARGET)

encryptmsg_clean:
	$(MAKE) -C $(ENCRYPTMSG_BUILD_DIR) clean

encryptmsg_distclean:
	$(MAKE) -C $(ENCRYPTMSG_BUILD_DIR) distclean

# Zlib
%{if build_zlib}
ZLIB = %{zlib_target}
ZLIB_DIR = %{zlib_dir}
$(ZLIB) :
	$(MAKE) %{zlib_makefile} -C $(ZLIB_DIR) RELEASE=$(RELEASE)
%{endif}

EXE_LINKS_TO += %{zlib_ldflags}

zlib_clean:
%{if build_zlib}
	$(MAKE) -C $(ZLIB_DIR) %{zlib_makefile} clean
%{endif}

zlib_distclean:
%{if build_zlib}
	$(MAKE) -C $(ZLIB_DIR) %{zlib_makefile} %{zlib_distclean_target}
%{endif}

# BZip2
%{if build_bzip2}
BZIP2 = %{bzip2_target}
BZIP2_DIR = %{bzip2_dir}
$(BZIP2) :
	$(MAKE) %{bzip2_make_target} -C $(BZIP2_DIR)
%{endif}

EXE_LINKS_TO += %{bzip2_ldflags}

bzip2_clean:
%{if build_bzip2}
	$(MAKE) -C $(BZIP2_DIR) clean
%{endif}

bzip2_distclean:
%{if build_bzip2}
	$(MAKE) -C $(BZIP2_DIR) distclean
%{endif}

# QT UI build

QT_BUILD_DIR = %{qt_build_dir}

qt_ui: libs $(BOTAN_TARGET) $(ENCRYPTMSG_TARGET) $(ZLIB) $(BZIP2)
	$(MAKE) -C $(QT_BUILD_DIR) RELEASE=$(RELEASE)

qt_ui_clean:
%{if build_qt_ui}
	if [ -d $(QT_BUILD_DIR) ]; \
	then \
	$(MAKE) -C $(QT_BUILD_DIR) clean RELEASE=$(RELEASE) ;\
	fi
%{endif}

qt_ui_distclean:
%{if build_qt_ui}
	if [ -d $(QT_BUILD_DIR) ]; \
	then \
	$(MAKE) -C $(QT_BUILD_DIR) distclean RELEASE=$(RELEASE) ;\
	fi
%{endif}

# Gtest build
# ###########

GTEST_DIR = %{deps_dir}/gtest/googletest
GTEST_TARGET_DIR = %{build_dir}/gtest
# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
GTEST_CPPFLAGS += -isystem $(GTEST_DIR)/include
# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)
GTEST = $(GTEST_TARGET_DIR)/libgtest_main.a $(GTEST_TARGET_DIR)/libgtest.a

clean_gtest :
	rm -f $(GTEST_TARGET_DIR)/libgtest.a $(GTEST_TARGET_DIR)/libgtest_main.a $(GTEST_TARGET_DIR)/*.o

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
$(GTEST_TARGET_DIR)/gtest-all.o : $(GTEST_SRCS_)
	$(MKDIR_P) $(@D)
	$(CXX) $(ABI_FLAGS) $(CPPFLAGS) $(GTEST_CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc -o $@

$(GTEST_TARGET_DIR)/gtest_main.o : $(GTEST_SRCS_)
	$(MKDIR_P) $(@D)
	$(CXX) $(ABI_FLAGS) $(CPPFLAGS) $(GTEST_CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc -o $@

$(GTEST_TARGET_DIR)/libgtest.a : $(GTEST_TARGET_DIR)/gtest-all.o
	$(AR) $(ARFLAGS) $@ $(GTEST_TARGET_DIR)/gtest-all.o

$(GTEST_TARGET_DIR)/libgtest_main.a : $(GTEST_TARGET_DIR)/gtest-all.o $(GTEST_TARGET_DIR)/gtest_main.o
	$(AR) $(ARFLAGS) $@ $(GTEST_TARGET_DIR)/gtest-all.o $(GTEST_TARGET_DIR)/gtest_main.o

# End Gtest build
# ###############

# Unit tests

TEST_INCLUDES = -isystem $(GTEST_DIR)/include
TEST_LINKS_TO = $(GTEST_TARGET_DIR)/libgtest_main.a $(GTEST_TARGET_DIR)/libgtest.a

# Misc targets

%{if make_supports_phony}
.PHONY: all cli libs qt_ui test botan botan_clean botan_distclean encryptmsg encryptmsg_clean encryptmsg_distclean zlib bzip2 qt_ui_clean test_clean clean_gtest clean distclean install macos_deployment
%{endif}

clean: qt_ui_clean clean_gtest
	$(PYTHON_EXE) $(SCRIPTS_DIR)/cleanup.py --build-dir="%{build_dir}"

distclean: qt_ui_distclean zlib_distclean bzip2_distclean botan_distclean encryptmsg_distclean
	$(PYTHON_EXE) $(SCRIPTS_DIR)/cleanup.py --build-dir="%{build_dir}" --distclean

# MacOS packaging
macos_deployment: qt_ui
	( cd macos_deployment && ./prepare_bundle.sh ../bin/$(CONFIG_DIR)/EncryptPad.app )

# Install in Desktop Environment

install: cli qt_ui
	scripts/install.sh $(PREFIX) $(BINDIR)

# Object Files
LIBOBJS = %{join lib_objs}

DEPSOBJS = %{join deps_objs}

CLIOBJS = %{join cli_objs}

TESTOBJS = %{join test_objs}

# Executable targets

$(CLI): $(LIBRARIES) $(CLIOBJS) $(BOTAN_TARGET) $(ENCRYPTMSG_TARGET) $(ZLIB) $(BZIP2)
	$(EXE_LINK_CMD) $(ABI_FLAGS) $(LDFLAGS) $(CLIOBJS) $(EXE_LINKS_TO) $(ENCRYPTMSG_LDFLAGS) $(BOTAN_LDFLAGS) %{output_to_exe}$@
	$(POST_LINK_CMD)

$(TEST): $(LIBRARIES) $(TESTOBJS) $(GTEST) $(BOTAN_TARGET) $(ENCRYPTMSG_TARGET) $(ZLIB) $(BZIP2)
	$(EXE_LINK_CMD) $(ABI_FLAGS) $(LDFLAGS) $(TESTOBJS) $(TEST_LINKS_TO) $(EXE_LINKS_TO) $(ENCRYPTMSG_LDFLAGS) $(BOTAN_LDFLAGS) %{output_to_exe}$@
	$(POST_LINK_CMD)

# Library targets

%{library_target}: $(LIBOBJS) $(DEPSOBJS)
	$(AR) %{ar_options} %{ar_output_to}$@ $(LIBOBJS) $(DEPSOBJS)

# Build Commands

%{for lib_build_info}
%{obj}: %{src}
	$(CXX) $(SO_OBJ_FLAGS) $(BUILD_FLAGS) %{isa_flags} $(BOTAN_CXXFLAGS) $(INCLUDE_PATHS) %{dash_c} %{src} %{dash_o}$@
%{endfor}

%{for deps_build_info}
%{obj}: %{src}
	$(CXX) $(SO_OBJ_FLAGS) $(DEPS_BUILD_FLAGS) $(BOTAN_CXXFLAGS) $(INCLUDE_PATHS) %{dash_c} %{src} %{dash_o}$@
%{endfor}

%{for cli_build_info}
%{obj}: %{src}
	$(CXX) $(BUILD_FLAGS) %{isa_flags} $(BOTAN_CXXFLAGS) $(INCLUDE_PATHS) %{dash_c} %{src} %{dash_o}$@
%{endfor}

%{for test_build_info}
%{obj}: %{src}
	$(CXX) $(TEST_BUILD_FLAGS) %{isa_flags} $(BOTAN_CXXFLAGS) $(INCLUDE_PATHS) $(TEST_INCLUDES) %{dash_c} %{src} %{dash_o}$@
%{endfor}
